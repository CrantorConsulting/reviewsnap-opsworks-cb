global
  log 127.0.0.1   local0
  log 127.0.0.1   local1 notice
  #log loghost    local0 info
  maxconn <%= node[:haproxy][:global_max_connections] %>
  #debug
  #quiet
  user haproxy
  group haproxy
  <% if node[:haproxy][:stats_socket_level] %>
  stats socket <%= node[:haproxy][:stats_socket_path] %> level <%= node[:haproxy][:stats_socket_level] %>
  <% else %>
  stats socket <%= node[:haproxy][:stats_socket_path] %>
  <% end %>

defaults
  log             global
  mode            http
  option          httplog
  option          dontlognull
  retries         <%= node[:haproxy][:retries] %>
  option          redispatch
  maxconn        <%= node[:haproxy][:default_max_connections] %>
  timeout client <%= node[:haproxy][:client_timeout] %>             # Client and server timeout must match the longest
  timeout server <%= node[:haproxy][:server_timeout] %>             # time we may wait for a response from the server.
  timeout queue  <%= node[:haproxy][:queue_timeout] %>              # Don't queue requests too long if saturated.
  timeout connect <%= node[:haproxy][:connect_timeout] %>           # There's no reason to change this one.
  timeout http-request <%= node[:haproxy][:http_request_timeout] %>	# A complete request may never take that long.
  <% if node[:haproxy][:httpclose] %>
  option          httpclose                                         # disable keepalive (HAProxy does not yet support the HTTP keep-alive mode)
  <% end %>
  <% if node[:haproxy][:http_server_close] %>
  option          http-server-close                                 # enable HTTP connection closing on the server side
  <% end %>
  option          abortonclose                                      # enable early dropping of aborted requests from pending queue
  option          httpchk                                           # enable HTTP protocol to check on servers health
  <% if node[:haproxy][:enable_stats] -%>
  stats auth <%= node[:haproxy][:stats_user] %>:<%= node[:haproxy][:stats_password] %>
  stats uri <%= node[:haproxy][:stats_url] %>
  <% end -%>

listen http-in
  bind :80
  <% node[:haproxy][:new_site_urls].each do |url| -%>
  acl testpath path <%= url %>
  <% end %>
  use_backen abtest if testpath
  default_backend old

frontend https-in
  bind :443
  mode tcp
  option redispatch
  option ssl-hello-chk
  <% node[:haproxy][:old_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:443 maxconn 1024
  <% end -%>

backend old
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option forwardfor
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  <% node[:haproxy][:old_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 maxconn 1024 check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>

backend abtest
  balance source
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  cookie abtest insert nocache maxlife 24h
  <% node[:haproxy][:old_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= node[:haproxy][:oldsite_weight] %> maxconn 1024 check inter <%= node[:haproxy][:check_interval] %> cookie old
  <% end -%>
  <% node[:haproxy][:new_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= node[:haproxy][:newsite_weight] %> maxconn 1024 check inter <%= node[:haproxy][:check_interval] %> cookie new
  <% end -%>

